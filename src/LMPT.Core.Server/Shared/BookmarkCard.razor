@using LMPT.Core.Contract.DB.Bookmark
@using LMPT.Core.Services.Helper;
@inject ViewModelMediator Mediator;
@inject DataAccess Db;
@inject MainViewModel MainViewModel;
@inject SidebarViewModelFactory SidebarViewModelFactory;



 <style>

.item {
  padding: 2px;
}


.typecontrol button{
  width: 100%;
  color: red;
}



.container {
    padding: 6px;
    margin: 6px;
    background: #292727;
  display: grid;
  grid-template-columns: 96px  auto;
  grid-template-rows: 96px auto;
  grid-template-areas: 
    "avatar  main"
    "navi  navi";
}

</style>



<tr style="margin:6px;" class="${sex} ${isNew}">


   

    <div class="container">


   <div style="grid-area:avatar; background: url('@b.Face');background-size:cover" class="avatar">
   </div>
   

  <div style="grid-area:main" class="item">
        <h1>@b.Nickname</h1>

@{
    string IsActive(BookmarkType type)
    {
        if(b.BookmarkType != type) 
        {
            return "";
        }

        switch (type)
        {
            case BookmarkType.Streamer:
                return "background:rgb(255,160,160); color: black ";
            case BookmarkType.Follower:
                return "background:rgb(80,96,240);  color: black ";
            default:
                return "background:rgb(255,0,160); ";
        } 
    }
}

        <a class="button mini view" style="@IsActive(BookmarkType.Default)" onclick=@( () => ChangeBookmarkType(BookmarkType.Default))>Default</a>
        <a class="button mini view" style="@IsActive(BookmarkType.Streamer)" onclick=@( () => ChangeBookmarkType(BookmarkType.Streamer))>Streamer</a>
        <a class="button mini view" style="@IsActive(BookmarkType.Follower)" onclick=@( () => ChangeBookmarkType(BookmarkType.Follower))>Follower</a>

                    <h3><span>Latest Replay:</span>@LastReplay</h3>
                    <h4><span>Last Viewed:</span>TODO</h4>

    </div>
   <div style="grid-area:navi; text-align:right" class="item">         
        <a class="button  view"  onclick="@ShowUser">@b.ReplayCount replays</a>
        <a class="button  fans"  onclick="@ShowFans">@b.FollowerCount Fans</a>
        <a class="button  following" onclick="@ShowFollowings">Following @b.FollowingCount</a>
  </div>
</div>
                <!-- <td width="64">
                    <img src=@b.Face style="height: 64px; width: 64px;" class="avatar"/>
                </td>
                <td width="90%" class="main">
                    <div class="bookmarkicon" onClick="removeBookmark('${list[index].uid}')">
                        <svg class="bright yellow" viewBox="0 0 20 20">
                            <path d="M17.684,7.925l-5.131-0.67L10.329,2.57c-0.131-0.275-0.527-0.275-0.658,0L7.447,7.255l-5.131,0.67C2.014,7.964,1.892,8.333,2.113,8.54l3.76,3.568L4.924,17.21c-0.056,0.297,0.261,0.525,0.533,0.379L10,15.109l4.543,2.479c0.273,0.153,0.587-0.089,0.533-0.379l-0.949-5.103l3.76-3.568C18.108,8.333,17.986,7.964,17.684,7.925 M13.481,11.723c-0.089,0.083-0.129,0.205-0.105,0.324l0.848,4.547l-4.047-2.208c-0.055-0.03-0.116-0.045-0.176-0.045s-0.122,0.015-0.176,0.045l-4.047,2.208l0.847-4.547c0.023-0.119-0.016-0.241-0.105-0.324L3.162,8.54L7.74,7.941c0.124-0.016,0.229-0.093,0.282-0.203L10,3.568l1.978,4.17c0.053,0.11,0.158,0.187,0.282,0.203l4.578,0.598L13.481,11.723z"></path>
                        </svg>
                    </div>
                    <div class="monitoricon" onClick="toggleMonitoringFlag('${list[index].uid}')" title="Toggle LAMD monitoring of this account.">
                        <svg class="${monitored}" viewBox="0 0 20 20">
                            <path d="M10,6.978c-1.666,0-3.022,1.356-3.022,3.022S8.334,13.022,10,13.022s3.022-1.356,3.022-3.022S11.666,6.978,10,6.978M10,12.267c-1.25,0-2.267-1.017-2.267-2.267c0-1.25,1.016-2.267,2.267-2.267c1.251,0,2.267,1.016,2.267,2.267C12.267,11.25,11.251,12.267,10,12.267 M18.391,9.733l-1.624-1.639C14.966,6.279,12.563,5.278,10,5.278S5.034,6.279,3.234,8.094L1.609,9.733c-0.146,0.147-0.146,0.386,0,0.533l1.625,1.639c1.8,1.815,4.203,2.816,6.766,2.816s4.966-1.001,6.767-2.816l1.624-1.639C18.536,10.119,18.536,9.881,18.391,9.733 M16.229,11.373c-1.656,1.672-3.868,2.594-6.229,2.594s-4.573-0.922-6.23-2.594L2.41,10l1.36-1.374C5.427,6.955,7.639,6.033,10,6.033s4.573,0.922,6.229,2.593L17.59,10L16.229,11.373z"></path>
                        </svg>            
                    </div>
                    <h1>@b.Nickname</h1>
                    
                    <a class="button mini view" style=@(b.BookmarkType == BookmarkType.Default ? "background:blue" : "") onclick=@( () => ChangeBookmarkType(BookmarkType.Default))>Default</a>
                    <a class="button mini view" style=@(b.BookmarkType == BookmarkType.Streamer ? "background:blue" : "") onclick=@( () => ChangeBookmarkType(BookmarkType.Streamer))>Streamer</a>
                    <a class="button mini view" style=@(b.BookmarkType == BookmarkType.Follower ? "background:blue" : "") onclick=@( () => ChangeBookmarkType(BookmarkType.Follower))>Follower</a>
                    <h1>@b.Nickname</h1>
                    <h3><span>Latest Replay:</span>TODO</h3>
                    <h4><span>Last Viewed:</span>TODO</h4>
                    <div class="buttons">
                        <a class="button mini view"  onclick="@ShowUser">@b.ReplayCount replays</a>
                        <a class="button mini fans"  onClick=@("showFollowers('"+b.Uid+"')")>@b.FollowerCount Fans</a>
                        <a class="button mini following" onClick=@("showFollowing('"+b.Uid+"')")>Following @b.FollowingCount</a>
                    </div>
                </td> -->
        </tr>


@functions{

    [Parameter] Bookmark b {get; set;}

    public string LastReplay { get; set; }

    void ChangeBookmarkType(BookmarkType type)
    {
        Db.ChangeBookmarkType(b.Uid, type);
        b.BookmarkType = type;
        StateHasChanged();
    }

    protected override void OnInit()
    {
        var lastReplay = Db.FindReplaysByUid(b.Uid).OrderBy(x => x.StartTimeStamp).LastOrDefault();
        LastReplay = lastReplay?.StartTimeStamp.ToFormattedDateTime() ?? "<none>";
    }

     void ShowUser()
    {
        
        Mediator.Send(ViewModelNotification.ShowUser, b.Uid);    
    }  
     void ShowFans()
    {
        MainViewModel.OpenFans(b.Uid);
    }  
     void ShowFollowings()
    {
        MainViewModel.OpenFollowers(b.Uid);
    }  
}